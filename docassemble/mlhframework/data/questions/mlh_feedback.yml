# MLH-specific overrides for GithubFeedbackForm/data/questions/feedback.yml

---
include:
  - docassemble.GithubFeedbackForm:feedback.yml
---
metadata:
  title: MLH-Forms
#  exit url: https://da-prod.mplp.org/
---
code: |
  al_feedback_form_title = "Feedback"
  al_how_to_get_legal_help = mlh_how_to_get_legal_help
  # Will be the name of the Github label added to new issues:
  al_github_label = 'MLH user feedback'
---
objects:
  - image_github_image_paste: |
      DAStaticFile.using(
        filename="github_image_paste.png",
        alt_text=word("Copy and paste an image or screenshot right into a GitHub Comment"))

---
id: intro
decoration: opinion
question: |
  ${ al_feedback_form_title } - Tell us how we're doing
subquestion: |
  This feedback form is for telling Michigan Legal Help about technical issues or your experience using our site to create forms.

  Please **do not** include any personal information. 

  % if filename == "docassemble.MLHPPOAndProposedOrder:data/questions/ppo_and_proposed_order.yml":
  Your feedback will go to Michigan Legal Help, **not the court**. If there is something you want the court to know, go back to the Personal Protection Order (PPO) questions and include the information there. 
  
  % endif  
  ${ collapse_template(al_how_to_get_legal_help) }
  
fields:
  - "**What would you like to tell us?**": details
    rows: 4
    input type: area
  - Your e-mail address:: feedback_email
    datatype: email
    required: False
  - note: |
      Thank you for your feedback!
continue button field: intro
---
if: |
  get_config('debug')
id: intro
question: |
  MLH Tester feedback form
decoration: opinion
fields:
  - "**Tester ID:**": tester_name 
    label above field: False
  - note: |
      ${ collapse_template(tester_name_explainer) }
  - "**What would you like to tell us about?**": reason
    input type: radio
    choices:
      - Bug: bug
      - Language fix: language
      - I have something else to tell you: something
  - "**What was the title at the top of the page where the bug happened?**": page_title
    show if:
      code: |
        not question_id
  - "**When should this fix be implemented?**": maturity_level
    code: maturity_levels
    help: |
      We use a [5-level
      rating](https://suffolklitlab.org/legal-tech-class/docs/legal-tech-overview/maturity-model/#example-maturity-model-for-the-massaccess-project)
      for our finished forms. Forms are usually ready to publish when they meet 
      level 1, but all kinds of feedback are valuable. Categorizing feedback
      helps us choose the right tasks to work on in the right order.
    show if: 
      code: |
        False
  - "**What is the language fix?**": details
    datatype: area
    rows: 4
    show if:
      variable: reason
      is: language
  - note: |
      **Tell us the steps that you followed before the bug, what you expected to 
      happen, and what actually happened.** [BR]

      For example:

      1. On the first page, I typed my first name.
      2. I pressed "continue" to go to the next page.
      3. I expected to be able to enter my phone number, but it showed an error screen instead that said "..."
    show if:
      variable: reason
      is: bug
  - "**What is the bug?**": details
    datatype: area
    rows: 4
    show if:
      variable: reason
      is: bug
  - "**What would you like to tell us?**": details
    datatype: area
    rows: 4
    show if:
      variable: reason
      is: something
  - note: |
      Your answers will be shared with a server administrator to help
      track down the problem. It will not be made public.
    show if:
      code: |
        server_share_answers
      variable: reason
      is: bug
continue button field: intro

---
code: |
  feedback_start_over_label = 'Start over'
  feedback_resume_label = 'Resume where you left off'
---
code: |
  if not get_config('debug'):
    reason = "something"
---
id: exit
event: gentle_exit
question: |
  How to get more help
decoration: lifebuoy
subquestion: |
  ${ mlh_how_to_get_legal_help }
  
  To keep working on your form, you can close this tab and continue where you left off. You can also use the **${ feedback_resume_label }** button below.
 
action buttons:
  - label: ${ feedback_resume_label }
    action: ${ interview_url(session=orig_session_id, i=filename) }
    color: success
    icon: backward
---
template: tester_name_explainer
subject: |
  What is this?
content: |
  Enter your initials, first name, nickname, or codename, etc. Just something so we know who to follow up with if needed. This will appear on a public Github page with our interview code.
---
template: mlh_how_to_get_legal_help
subject: |
  Do you need more help?
content: |
  - [Use the Guide to Legal Help](https://michiganlegalhelp.org/guide-to-legal-help) to get information about free legal help or hiring a lawyer.
  
  - [Go to Michigan Legal Help](https://michiganlegalhelp.org/explore-legal-resources) for Michigan legal information.

  - [Go to LiveHelp](https://michiganlegalhelp.org/livehelp) to chat with someone or send an email about your issue.
  
  - [Find a Self-Help Center](https://michiganlegalhelp.org/organizations-and-courts/self-help-centers) to visit in person.
---
id: end_results
event: end_results
question: |
  Thank you for your feedback
decoration: opinion
subquestion: |
  % if reason == "bug":
  Please close the tab where you found the bug and restart using the 
  **${ feedback_start_over_label }** button at the bottom of this page.
  % else:
  To go back to where you left off, close this tab and find the tab where you were answering questions. Or use the **${ feedback_resume_label }** button at the bottom of the page.
  % endif
  
  % if get_config('debug'):
  % if issue_url:
  [Open this issue in GitHub](${issue_url}) to 
  
  * add more information or screenshots,
  * upload a document (like a form with an error on it), or 
  * check the status.

  To add information on GitHub you need to [make an account](https://github.com/join?plan=free&ref_cta=Join%2520for%2520free&ref_loc=cards&ref_page=%2Fpricing&source=pricing-card-free). Visit [GitHub Tips for MLH Testers](https://docs.google.com/document/d/11ReCxdZ3vfS3nGW6LQlhvZK3DFXD8WAs3S2nOCl_1oc) for more info on using Github to track issues. 
  % endif
  % else:
  ${ collapse_template(mlh_how_to_get_legal_help) }
  % endif
action buttons:
  - label: ${ feedback_start_over_label }
    action: ${ interview_url(i=filename, new_session=1) }
    color: warning
    icon: sign-out-alt
    show if: reason == "bug"
  - label: ${ feedback_resume_label }
    action: ${ interview_url(session=orig_session_id, i=filename) }
    color: success
    icon: backward
    show if: reason != "bug"
---
template: generic_report[i]
subject: |
  % if get_config('debug') and variable:
  Tester feedback: ${i} (`${ variable }`)
  % elif get_config('debug'):
  Tester feedback: ${i}
  % else:
  User feedback
  % endif
content: |
  &nbsp; | &nbsp;
  -------|------------------------------------
  % if filename:
  Form | `${ filename }`
  % endif
  % if question_id:
  Question ID | `${ question_id }`
  % elif defined('page_title'): 
  Page title | ${ page_title }
  % endif
  % if variable:
  Variable sought | `${ variable }`
  % endif
  % if package_version:
  Version | `${ package_version }`
  % endif
  % if defined('maturity_level'):
  Maturity target | ${ maturity_level }
  % endif
  % if defined('tester_name'):
  Tester | ${ tester_name }
  % endif
  % if defined('feedback_email'):
  User e-mail | ${ feedback_email }
  % endif
  
  **Details:** 
  
  ${ details }
---
########################## Send to GitHub code ##########################
# editing to stop filtering out feedback that contains URLs
only sets:
  - note_issue
need:
  - should_send_to_github
  - question_id
  - variable
  - package_version
  - filename
code: |
  if task_performed('issue noted'):
    pass
  elif is_likely_spam(issue_template.content, filter_urls=False):
    log("Not saving feedback because it looks like spam")
    mark_task_as_performed('issue noted', persistent=True)
    issue_url = saved_uuid = None
    note_issue = False # End block early
  else:
    saved_uuid # Trigger the code to save locally on the server and optionally link the session answers. We do this regardless of whether we send to GitHub
    if showifdef('would_be_on_panel'):
      add_panel_participant(panel_email)

    if should_send_to_github:
      issue_url # Trigger the code to save as a GitHub issue
      if issue_url and saved_uuid:
        # Link the GitHub issue to the saved feedback in database
        set_feedback_github_url(saved_uuid, issue_url)
      else:
        log(f"This form was not able to add an issue on the {github_user}/{github_repo} repo. Check your config.")
        if al_error_email:
          log(f"Unable to create issue on repo {github_repo}, falling back to emailing {al_error_email}")
          send_email(
              to=al_error_email,
              subject=f"{github_repo} - {issue_template.subject_as_html(trim=True)}",
              template=issue_template
          )
        else:
          log(f"~~~USER FEEDBACK~~~ {github_repo} - {issue_template.subject_as_html(trim=True)} - {issue_template.content_as_html(trim=True)}")
    else:
      issue_url = None
    mark_task_as_performed('issue noted', persistent=True)

  note_issue = True
---
# Un-comment this block in order to test the above code WITHOUT actually
# creating a new GitHub issue each time the feedback form is used.
# BE SURE to re-comment this when you install it!
---
########################## Send to GitHub code ##########################
#code: |
#  send_to_github = True
#  issue_url = "https://github.com/mplp/docassemble-mlhframework/issues/17"